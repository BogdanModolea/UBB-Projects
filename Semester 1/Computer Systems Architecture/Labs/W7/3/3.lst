     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  extern printf              ; tell nasm that exit exists even if we won't be defining it
     9                                  extern fscanf               ; tell nasm that exit exists even if we won't be defining it
    10                                  extern fopen               ; tell nasm that exit exists even if we won't be defining it
    11                                  extern fread               ; tell nasm that exit exists even if we won't be defining it
    12                                  extern fprintf               ; tell nasm that exit exists even if we won't be defining it
    13                                  extern fclose               ; tell nasm that exit exists even if we won't be defining it
    14                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
    15                                  import scanf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    16                                  import printf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    17                                  import fscanf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    18                                  import fopen msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    19                                  import fread msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    20                                  import fprintf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    21                                  import fclose msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    22                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    23                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    24                                  
    25                                  ; our data is declared here (the variables needed by our program)
    26                                  segment data use32 class=data
    27                                      
    28 00000000 <res 00000004>              a resd 1
    29 00000004 <res 00000004>              b resd 1
    30                                      
    31 00000008 256400                      read_format db "%d", 0
    32                                      
    33 0000000B 2564202B202564203D-         print_format db "%d + %d = %d", 13, 0
    33 00000014 2025640D00         
    34                                      
    35 00000019 312E74787400                file db "1.txt", 0
    36                                      
    37 0000001F 7700                        mode db "w", 0
    38 00000021 <res 00000004>              fd resd 1
    39                                      
    40                                  
    41                                  ; our code starts here
    42                                  segment code use32 class=code
    43                                      start:
    44                                          ; ...
    45                                          ; fd = fopen(path, mod)
    46                                          ; EAX
    47                                          ; w - write -> position my cursor at the beginning of the file
    48                                          ; a - apent -> position my cursour at the end of the file
    49                                          ; r - read
    50                                          
    51 00000000 68[00000000]                    push a
    52 00000005 68[08000000]                    push read_format    
    53 0000000A FF15[00000000]                  call [scanf]
    54                                          
    55 00000010 83C408                          add esp, 4 * 2
    56                                      
    57 00000013 68[04000000]                    push b
    58 00000018 68[08000000]                    push read_format    
    59 0000001D FF15[00000000]                  call [scanf]
    60 00000023 83C408                          add esp, 4 * 2
    61                                      
    62 00000026 68[1F000000]                    push mode
    63 0000002B 68[19000000]                    push file
    64 00000030 FF15[00000000]                  call [fopen]
    65 00000036 A3[21000000]                    mov [fd], eax
    66 0000003B 83C408                          add esp, 4 * 2
    67                                      
    68 0000003E A1[00000000]                    mov eax, [a]
    69 00000043 0305[04000000]                  add eax, [b]
    70 00000049 50                              push eax
    71 0000004A FF35[04000000]                  push dword [b]
    72 00000050 FF35[00000000]                  push dword [a]
    73 00000056 68[0B000000]                    push print_format
    74 0000005B FF35[21000000]                  push dword [fd]
    75 00000061 FF15[00000000]                  call [fprintf]
    76 00000067 83C414                          add esp, 4 * 5
    77 0000006A FF15[00000000]                  call [fclose]
    78                                          
    79 00000070 83C404                          add esp, 4
    80                                          
    81                                          
    82                                          ; exit(0)
    83 00000073 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    84 00000075 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
