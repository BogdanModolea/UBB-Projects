     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 0204020502020404            s db 2, 4, 2, 5, 2, 2, 4, 4
    15                                      ;s db 1, 2, 3, 4, 5, 6, 7, 8
    16                                      lens equ $ - s
    17 00000008 0000<rept>                  d times lens dw 0
    18 00000018 00                          lend db 0
    19 00000019 00                          apr db 0
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 BE[00000000]                    mov esi, s
    24 00000005 BF[08000000]                    mov edi, d
    25 0000000A B908000000                      mov ecx, lens                           ; pastram in ecx lungimea sirului S pentru a putea opera bucla
    26                                          repeta:                                 ; bucla principala pentru a parcurge toate valorile lui S
    27 0000000F C605[19000000]00                    mov byte[apr], 0                    ; pastram in [apr] numarul de aparitii ale unui nr din S in sirul D
    28 00000016 81FE[00000000]                      cmp esi, s                          ; comparam pentru a pastra primul element din S                  
    29 0000001C 7421                                jz next1                            
    30 0000001E B8[08000000]                            mov eax, d                      ; pastram in eax, pentru a putea compara, valoare sirului D pana in acel moment
    31 00000023 40                                      inc eax                         
    32 00000024 51                                      push ecx                        ; salvam lungimea sirului S in stiva pentru a o recupera mai tarziu
    33 00000025 8B0D[18000000]                          mov ecx, [lend]                 ; mutam in ecx lungimea sirului D pentru a-l pargurge cu loop si pentru a verifica daca exista in sirul D valoare curenta din S
    34                                                  next3:
    35 0000002B 8A1E                                        mov bl, [esi]               ; mutam in bl valoarea curenta din S
    36 0000002D 3A18                                        cmp bl, [eax]               ; verificm bl cu valoaraea curenta din D
    37 0000002F 7506                                        jnz next4                   ; verificam daca valoarea curenta din S exista in sirul D
    38 00000031 FE05[19000000]                                  inc byte[apr]           ; incrementam numarul de aparitii a valorii din S in sirul D
    39                                                      next4:
    40 00000037 40                                          inc eax                     ; calculam urmatorul element din sirul D
    41 00000038 40                                          inc eax                     
    42 00000039 3A58FE                                      cmp bl, [eax-2]             
    43 0000003C E0ED                                    loopne next3                    ; repetam bucla pentru elementul din D determinat anterior doar daca nu am intalnit deja elementul din S in D
    44 0000003E 59                                      pop ecx                         ; dupa incheierea buclei, recuperam valoarea sirului S pentru a obtine urmatorul element
    45                                              next1:
    46 0000003F AC                                  lodsb                               
    47 00000040 803D[19000000]00                    cmp byte[apr], 0                    ; verificam daca elementul curent din S are sau nu aparitii in sirul D
    48 00000047 7508                                jnz next2                           ; sarim peste adaugare daca exista deja elementul in sirul D
    49 00000049 47                                      inc edi
    50 0000004A AA                                      stosb                               
    51 0000004B FE05[18000000]                          inc byte[lend]                  ; marim lungimea sirului D
    52                                              next2:
    53 00000051 E2BC                            loop repeta                             ; bucla pentru parcurgerea sirului S
    54                                          
    55                                          
    56 00000053 BE[00000000]                    mov esi, s                              ; repetam aceeasi procedura ca mai sus, doar ca de aceasta data
    57 00000058 BF[08000000]                    mov edi, d                              ; parcurgem sirul D si calculam de cate ori apare in sirul S, salvand astfel numarul de aparitii
    58 0000005D B908000000                      mov ecx, lens                           ; corespunzatoare fiecarui element
    59                                          repeta1:
    60 00000062 C605[19000000]00                    mov byte[apr], 0
    61 00000069 B8[00000000]                        mov eax, s
    62 0000006E 51                                  push ecx
    63 0000006F B908000000                          mov ecx, lens
    64                                              next5:
    65 00000074 8A5F01                                  mov bl, [edi + 1]
    66 00000077 3A18                                    cmp bl, [eax]
    67 00000079 7506                                    jnz next6
    68 0000007B FE05[19000000]                              inc byte[apr]
    69                                                  next6:
    70 00000081 40                                      inc eax
    71 00000082 E2F0                                loop next5
    72 00000084 59                                  pop ecx
    73 00000085 803D[19000000]00                    cmp byte[apr], 0
    74 0000008C 740A                                jz next7
    75 0000008E 8A15[19000000]                          mov dl, byte[apr]
    76 00000094 8817                                    mov [edi], dl
    77 00000096 47                                      inc edi
    78 00000097 47                                      inc edi
    79                                              next7:
    80 00000098 E2C8                            loop repeta1
    81                                          
    82                                          ; exit(0)
    83 0000009A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    84 0000009C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
