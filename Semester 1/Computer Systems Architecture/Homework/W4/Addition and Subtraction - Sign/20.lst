     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 1A                          a db 1Ah
    15 00000001 0500                        b dw 5h
    16 00000003 17000000                    c dd 17h
    17 00000007 0300000000000000            d dq 3h
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; a-b-(c-d)+d
    22                                          
    23                                          ;(c - d)
    24 00000000 A1[03000000]                    mov eax, [c]
    25 00000005 99                              cdq
    26 00000006 2B05[07000000]                  sub eax, dword [d]
    27 0000000C 1B15[0B000000]                  sbb edx, dword [d+4]
    28 00000012 50                              push eax
    29 00000013 52                              push edx
    30                                          
    31                                          ;(a - b)
    32 00000014 A0[00000000]                    mov al, [a]
    33 00000019 6698                            cbw
    34 0000001B 668B0D[01000000]                mov cx, [b]
    35 00000022 6629C8                          sub ax, cx
    36                                          
    37                                          ;a - b - (c - d)
    38 00000025 98                              cwde
    39 00000026 99                              cdq
    40 00000027 59                              pop ecx
    41 00000028 5B                              pop ebx
    42 00000029 29D8                            sub eax, ebx
    43 0000002B 19CA                            sbb edx, ecx
    44                                          
    45                                          ;a - b - (c - d) + d
    46 0000002D 0305[07000000]                  add eax, dword [d]
    47 00000033 1315[0B000000]                  adc edx, dword [d+4]
    48                                          
    49                                          
    50                                          ; exit(0)
    51 00000039 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    52 0000003B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
