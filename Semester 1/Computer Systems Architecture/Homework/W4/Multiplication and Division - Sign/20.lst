     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 0500                        a dw 5
    15 00000002 02                          b db 2
    16 00000003 01000000                    e dd 1
    17 00000007 0100000000000000            x dq 1
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; x-b+8+(2*a-b)/(b*b)+e
    23                                          
    24                                          ;x - b
    25 00000000 99                              cdq
    26 00000001 A1[07000000]                    mov eax, dword [x]
    27 00000006 8B15[0B000000]                  mov edx, dword [x+4]
    28 0000000C 89C3                            mov ebx, eax
    29 0000000E 89D1                            mov ecx, edx
    30 00000010 A0[02000000]                    mov al, [b]
    31 00000015 6698                            cbw
    32 00000017 6699                            cwd
    33 00000019 99                              cdq
    34 0000001A 29C3                            sub ebx, eax
    35 0000001C 19D1                            sbb ecx, edx
    36                                          
    37                                          ;x - b + 8
    38 0000001E 83C308                          add ebx, 8
    39 00000021 83D100                          adc ecx, 0
    40 00000024 53                              push ebx
    41 00000025 51                              push ecx
    42                                          
    43                                          ;(2 * a - b)
    44 00000026 B002                            mov al, 2
    45 00000028 F625[00000000]                  mul byte [a]
    46 0000002E 8A1D[02000000]                  mov bl, [b]
    47 00000034 6698                            cbw
    48 00000036 6629D8                          sub ax, bx
    49 00000039 6689C3                          mov bx, ax
    50                                          
    51                                          ;(b * b)
    52 0000003C 66B80000                        mov ax, 0
    53 00000040 A0[02000000]                    mov al, [b]
    54 00000045 F625[02000000]                  mul byte [b]
    55                                          
    56                                          ;(2 * a - b) / (b * b)
    57 0000004B 6650                            push ax
    58 0000004D 6689D8                          mov ax, bx
    59 00000050 665B                            pop bx
    60 00000052 66F7F3                          div bx
    61 00000055 6650                            push ax
    62 00000057 B900000000                      mov ecx, 0
    63 0000005C 6689D9                          mov cx, bx
    64 0000005F 89CB                            mov ebx, ecx
    65                                          
    66                                          ;x - b + 8 + (2 * a - b) / (b * b)
    67 00000061 98                              cwde
    68 00000062 89C1                            mov ecx, eax
    69 00000064 89C3                            mov ebx, eax
    70 00000066 665B                            pop bx
    71 00000068 5A                              pop edx
    72 00000069 58                              pop eax
    73 0000006A 01D8                            add eax, ebx
    74 0000006C 11CA                            adc edx, ecx
    75                                          
    76                                          ;x - b + 8 + (2 * a - b) / (b * b) + e
    77 0000006E 8B1D[03000000]                  mov ebx, [e]
    78 00000074 B900000000                      mov ecx, 0
    79 00000079 01D8                            add eax, ebx
    80 0000007B 11CA                            adc edx, ecx
    81                                          
    82                                          ; exit(0)
    83 0000007D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    84 0000007F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
