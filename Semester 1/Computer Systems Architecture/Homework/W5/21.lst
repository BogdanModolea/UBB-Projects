     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; Se dau cuvintele A si B. Se cere dublucuvantul C:
    14                                      ; bitii 0-3 ai lui C coincid cu bitii 5-8 ai lui B
    15                                      ; bitii 4-10 ai lui C sunt invers fata de bitii 0-6 ai lui B
    16                                      ; bitii 11-18 ai lui C sunt 1
    17                                      ; bitii 19-31 ai lui C coincid cu bitii 3-15 ai lui B
    18                                  
    19 00000000 5777                        a dw 0111011101010111b
    20 00000002 BE9B                        b dw 1001101110111110b
    21 00000004 00000000                    c dd 0
    22                                      
    23                                      
    24                                  ; our code starts here
    25                                  segment code use32 class=code
    26                                      start:
    27                                          ; ...
    28 00000000 66BB0000                        mov bx, 0
    29                                          
    30 00000004 66A1[02000000]                  mov ax, [b]                                 
    31 0000000A 6625E001                        and ax, 0000000111100000b                   ; isolating bits 10-12 of b
    32 0000000E B105                            mov cl, 5 
    33 00000010 66D3C8                          ror ax, cl                                  ; rotating 5 positions to the right
    34 00000013 6609C3                          or bx, ax                                   ; putting the bits in the result
    35                                          
    36 00000016 66A1[02000000]                  mov ax, [b]
    37 0000001C 66F7D0                          not ax                                      ; inverting the value of b
    38 0000001F 6683E07F                        and ax, 0000000001111111b                   ; isolating bits 0-6 of b
    39 00000023 B104                            mov cl, 4
    40 00000025 66D3C0                          rol ax, cl                                  ; rotating bits 4 positions to the left
    41 00000028 6609C3                          or bx, ax 
    42                                          
    43 0000002B 6653                            push bx
    44 0000002D BB00000000                      mov ebx, 0
    45 00000032 665B                            pop bx
    46 00000034 81CB00F80700                    or ebx, 00000000000001111111100000000000b   ; setting bits 11-18 of the result to have the value 1
    47                                          
    48 0000003A 66A1[02000000]                  mov ax, [b]
    49 00000040 6683E0F8                        and ax, 1111111111111000b                   ; isolating bits 3-15 of b
    50 00000044 6650                            push ax
    51 00000046 B800000000                      mov eax, 0
    52 0000004B 6658                            pop ax
    53 0000004D B110                            mov cl, 16                                  
    54 0000004F D3C0                            rol eax, cl                                 ; rotating bits 16 positions to the left
    55 00000051 09C3                            or ebx, eax                                 ; putting the bits in the result
    56                                          
    57 00000053 891D[04000000]                  mov [c], ebx                                ; we put the value from the register in the result variable
    58                                          
    59                                          ; exit(0)
    60 00000059 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    61 0000005B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
