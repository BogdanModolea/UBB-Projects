Processes
------------


(pid_t) x = getpid() -> C++
	returns the current process id
	
execute something -> creating an imagine of that in memory -> appends to pending queue (until free cores in CPU)


pid_t fork()

<0	error
==0	child
>0 	parent


int main()
.
.
.
fork()


ps 	- 	process status
ps U /*username*/
kill -9 pid
     SIGKILL (instead of -9)
     
     
     
PQ: | mp | cp |    |
SCH (scheduler) -> EQ | mp | cp |    |


int p = fork()
if(p < 0){
   perror("Unable to create a childp");
   exit(1);
}
if(p == 0){
   //child process 
   exit(0);
}
//what's next
//only by the parent




l0
l1	fork();
l2	fork();
l3	printf("Child %d parent %d\n", getpid(), getppid());



							  0
						       /    \
						      0      0				2^n
						     /\      /\			
						    0  1    2  3
						    
						    
						    
						    
						    
int main(){
   int v = 1;
   int p = fokr();
   if(p < 0) {perror("Something"); exit(1);}
   if(p == 0){
      v++;
      printf("v: %d\n", v);
      v++;
      exit(0);
   }
   //parent
   printf("v: %d\n", v);
   return 0;
}





Output:
v: 2
v: 1






---------
signal
---------




CTRL + C -> SIGINT
CTRL + Z -> SIGSUSPENT
kill -SIGTERM pid
     -SIGHUP
     -SIGKILL pid
     9


pointer to a function: signal(int s, phandler_t)

void (*pf)(int);



	
void f(int s){
   printf("Not today!\n");
}

signal(SIGINT, f);
	*registering

singal(SIGSUSPENT, f);

signal(SIGTERM, f);

signal(SIGHUP, f);

//we can not signal(SIGKILL, f);
//we can not signal(SIGSTOP, f); //but we can still call them.




void stopf(int s){
   printf("Done!n\");
   exit(0);
}


void fchild(){
   int guess;
   while(1){
      prinf("Enter a number:");
      scanf("%d", &guess);
      
      if(guess == r){
         printf("You won");
         kill(SIGUSR1, getppid());
         exit(0);
      }
      else if(guess < r){
         printf("Try again with a greater number\n");
      }
      else{
         printf("Try again with a lower number\n");
      }
   }
}


int main(){
   srand(getpid());
   int r = rand() % 101;
   
   signal(SIGUSR1, stopf);
   
   int p = fork();
   if(p < 0){
      perror("Error");
      exit(1);
   }
   if(p == 0){
      fchild();
      exit(0);
   }
   sleep(60);
   kill(SIGTERM, p);
   printf("You lost");
   return 0;
}
   




alarm(int sec);

//BTS: 
	sleep(sec);
	raise(SIGALARM);
	

raise(int signal);

//BTS:
	kill(getpid(), signal);
	
	
	
signal(SIGALARM, f);

alarm(13);



wait(void **p);




waitpid(pid, addr, flags);


-1 = any child process
< -1 = abs(pid) any child process that has pid <= abs(val)


waitpid(0, 0, 0) == wait(0);






p = fork();
if(p < 0) {perror(); exit(1);}
if(p == 0){
	printf("Child \n");
	exit(0);
}

// we add: (so we have child \n parent and not parent \n child)

wait(0);
prinft("Parent\n");
return 0;




getppid();
main: 13
         c
fork(): -> 14
	printf -> getpid(), getppid();
		    14         13
		    	//sometimes 12 (parent of main)


























