[1, 2, a, 5, [1, 2, 5], 7, [10, 11]] => remove sublists


An element can be:

[H|T]	- atomic != list
	- number
	- is_list(H)


1)
process(l1, l2, ..., ln) = 
	* null, if L = null
	* process(l2, ..., ln), if l1 = list
	* l1 U process(l2, ..., ln), otherwise	(l1 is atom)



2) Given a list of numbers and sublists of numbers, substitute each sublist in which the sum of elements is odd
with the first element of that sublist (non-empty)

[1, 2, [2, 4], 7, 3, [4, 6, 7], [1], 8, 10, [3, 2]]
=> [1, 2, [2, 4], 7, 3, 4, 1, 8, 10, 3]

process(l1, l2, ..., ln) =				%l1 = l11, l12, ..., l1n
	* null, if L = null
	* l11 U process(l2, ..., ln), if l1 = list and sum(l1) % 2 == 1
	* l1 U process(l2, ..., ln), otherwise



3) Given a heterogeneous list composed of numbers and lists of numbers, remove the odd numbers from the sublists
that have a mountain aspect (3+ elems, /\)

mountain(l1, l2, ..., ln, F) = 
	* T, if n = 1 and F = 1
	* mountain(l2, ..., ln, 0), if l2 > l1 and F = 0
	* mountain(l2, ..., ln, 1), if l2 < l1 and F = 0
	* mountain(l2, ..., ln, 1), if l2 < l1 and F = 1
	* false, otherwise


remove_odd(l1, l2, ..., ln) =
	* null, if L = null
	* l1 U remove_odd(l2, ..., ln), if l1 % 2 == 0
	* remove_odd(l2, ..., ln), otherwise


process(l1, l2, ..., ln) = 
	* null, if L = null
	* remove_odd(l1) U process(l2, ..., ln), if l1 = list and mountain(l1)
	* l1 U process(l2, ..., ln), otherwise



4) Given a heterogeneous list of atoms and lists of numbers, remove all strictly increasing sequences of numbers
from the sublists.

[[1, 2, 4, 4, 7, 9, 0, 1, 1], 3, [], 24, [], a, [12, 4], [3, 5], b]
=> [[1], 3, [], 24, [], a, [12, 4], [], b]



increasing(l1, l2, ..., ln) = 
	* null, if L = null or if L = [l1, l2] and l1 < l2
	* l1, if L = [l1]
	* l1 U increasing(l2, ..., ln), if l1 > l2
	* increasing(l2, ..., ln), if l1 < l2 < l3
	* increasing(l2, ..., ln), if l1 < l2 >= l3